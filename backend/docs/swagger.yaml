basePath: /api
definitions:
  lab.LabProgress:
    properties:
      current_step:
        type: string
      lab_id:
        type: string
      logs:
        items:
          type: string
        type: array
      overall:
        description: 0-100
        type: integer
      services:
        items:
          $ref: '#/definitions/lab.ServiceProgress'
        type: array
      updated_at:
        type: string
    type: object
  lab.ProgressStep:
    properties:
      completed_at:
        type: string
      error:
        type: string
      message:
        type: string
      name:
        type: string
      started_at:
        type: string
      status:
        description: '"pending", "running", "completed", "failed"'
        type: string
    type: object
  lab.ServiceProgress:
    properties:
      completed_at:
        type: string
      description:
        type: string
      error:
        type: string
      name:
        type: string
      progress:
        description: 0-100
        type: integer
      started_at:
        type: string
      status:
        description: '"pending", "running", "completed", "failed"'
        type: string
      steps:
        items:
          $ref: '#/definitions/lab.ProgressStep'
        type: array
    type: object
  models.CreateUserRequest:
    properties:
      email:
        type: string
      name:
        type: string
      role:
        allOf:
        - $ref: '#/definitions/models.UserRole'
        enum:
        - user
        - admin
    required:
    - email
    - name
    - role
    type: object
  models.Credential:
    properties:
      created_at:
        type: string
      expires_at:
        type: string
      id:
        type: string
      lab_id:
        type: string
      label:
        type: string
      notes:
        type: string
      password:
        type: string
      updated_at:
        type: string
      url:
        type: string
      username:
        type: string
    type: object
  models.Lab:
    properties:
      created_at:
        type: string
      credentials:
        items:
          $ref: '#/definitions/models.Credential'
        type: array
      ends_at:
        type: string
      id:
        type: string
      name:
        type: string
      owner_id:
        type: string
      service_data:
        additionalProperties:
          type: string
        description: Store service-specific data for cleanup
        type: object
      started_at:
        type: string
      status:
        $ref: '#/definitions/models.LabStatus'
      template_id:
        description: Reference to the template used
        type: string
      updated_at:
        type: string
    type: object
  models.LabResponse:
    properties:
      credentials:
        items:
          $ref: '#/definitions/models.Credential'
        type: array
      ends_at:
        type: string
      id:
        type: string
      name:
        type: string
      owner:
        $ref: '#/definitions/models.User'
      started_at:
        type: string
      status:
        $ref: '#/definitions/models.LabStatus'
    type: object
  models.LabStatus:
    enum:
    - provisioning
    - ready
    - error
    - expired
    type: string
    x-enum-varnames:
    - LabStatusProvisioning
    - LabStatusReady
    - LabStatusError
    - LabStatusExpired
  models.LabTemplate:
    properties:
      created_at:
        type: string
      description:
        type: string
      expiration_duration:
        type: string
      id:
        type: string
      name:
        type: string
      owner:
        type: string
      services:
        items:
          $ref: '#/definitions/models.ServiceTemplate'
        type: array
    type: object
  models.LoginRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  models.LoginResponse:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/models.User'
    type: object
  models.ServiceTemplate:
    properties:
      config:
        additionalProperties:
          type: string
        type: object
      description:
        type: string
      name:
        type: string
      type:
        type: string
    type: object
  models.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      role:
        $ref: '#/definitions/models.UserRole'
      updated_at:
        type: string
    type: object
  models.UserRole:
    enum:
    - user
    - admin
    type: string
    x-enum-varnames:
    - UserRoleUser
    - UserRoleAdmin
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: A REST API for managing Spectro Cloud lab environments
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Spectro Lab API
  version: "1.0"
paths:
  /admin/labs:
    get:
      description: Get all labs in the system (admin only)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.LabResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get all labs (Admin)
      tags:
      - admin
  /admin/labs/{id}:
    delete:
      description: Delete any lab in the system (admin only)
      parameters:
      - description: Lab ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Lab deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Lab not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete lab (Admin)
      tags:
      - admin
  /admin/labs/{id}/cleanup:
    post:
      description: Cleanup resources for a specific lab (admin only)
      parameters:
      - description: Lab ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Lab cleanup completed successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Lab not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Cleanup lab (Admin)
      tags:
      - admin
  /admin/labs/{id}/stop:
    post:
      description: Stop any lab in the system (admin only)
      parameters:
      - description: Lab ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Lab stopped successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Lab not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Stop lab (Admin)
      tags:
      - admin
  /admin/palette-project/cleanup:
    post:
      consumes:
      - application/json
      description: Cleanup a palette project directly (admin only)
      parameters:
      - description: Project cleanup data
        in: body
        name: request
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Palette Project cleanup completed
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Cleanup palette project (Admin)
      tags:
      - admin
  /admin/users:
    get:
      description: Get all users in the system (admin only)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get all users (Admin)
      tags:
      - admin
    post:
      consumes:
      - application/json
      description: Create a new user (admin only)
      parameters:
      - description: User creation data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create user (Admin)
      tags:
      - admin
  /admin/users/{id}:
    delete:
      description: Delete a user (admin only)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete user (Admin)
      tags:
      - admin
  /admin/users/{id}/role:
    put:
      consumes:
      - application/json
      description: Update a user's role (admin only)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Role update data
        in: body
        name: request
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: User role updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update user role (Admin)
      tags:
      - admin
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return a JWT token
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Login user
      tags:
      - auth
  /auth/me:
    get:
      description: Get information about the currently authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get current user
      tags:
      - auth
  /health:
    get:
      description: Check if the API is running
      produces:
      - application/json
      responses:
        "200":
          description: API status
          schema:
            additionalProperties: true
            type: object
      summary: Health check
      tags:
      - system
  /labs:
    get:
      description: Get all labs owned by the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.LabResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get user labs
      tags:
      - labs
  /labs/{id}:
    delete:
      description: Delete a lab owned by the authenticated user
      parameters:
      - description: Lab ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Lab deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Lab not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete lab
      tags:
      - labs
    get:
      description: Get a specific lab by ID
      parameters:
      - description: Lab ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LabResponse'
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Lab not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get lab
      tags:
      - labs
  /labs/{id}/cleanup:
    post:
      description: Cleanup resources for a failed lab (user can cleanup their own
        failed labs)
      parameters:
      - description: Lab ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Lab cleanup completed successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Lab not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Cleanup failed lab
      tags:
      - labs
  /labs/{id}/progress:
    get:
      description: Get the progress information for a specific lab
      parameters:
      - description: Lab ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/lab.LabProgress'
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Progress not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get lab progress
      tags:
      - labs
  /labs/{id}/stop:
    post:
      description: Stop a lab owned by the authenticated user
      parameters:
      - description: Lab ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Lab stopped successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Lab not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Stop lab
      tags:
      - labs
  /templates:
    get:
      description: Get all available lab templates
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.LabTemplate'
            type: array
      security:
      - BearerAuth: []
      summary: Get lab templates
      tags:
      - templates
  /templates/{id}:
    get:
      description: Get a specific lab template by ID
      parameters:
      - description: Template ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LabTemplate'
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Template not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get lab template
      tags:
      - templates
  /templates/{id}/labs:
    post:
      description: Create a new lab instance from a template
      parameters:
      - description: Template ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Lab'
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create lab from template
      tags:
      - templates
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
